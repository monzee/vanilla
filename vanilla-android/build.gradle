apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 25
    buildToolsVersion '24.0.2'

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 25
        versionCode 1
        versionName "v$LIBRARY_VERSION"
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile project(':vanilla-core')
    provided 'com.android.support:appcompat-v7:25.0.0'
}

publishing {
    repositories.maven {
        name 'bintray'
        url 'https://api.bintray.com/maven/monzee/jvm/vanilla-android/'
        credentials {
            username = BINTRAY_USER
            password = BINTRAY_API_KEY
        }
    }

    android.libraryVariants.matching { it.buildType.name == 'release' }.all {
        def stem = name.capitalize()
        def allDeps = variantData.variantDependency.compileDependencies.with {
            androidDependencies + jarDependencies
        }
        def docs = task("javadoc${stem}", type: Javadoc, group: 'documentation') {
            source = javaCompile.source
            classpath += javaCompile.classpath + files(android.bootClasspath)
            title = 'Vanilla Android'
            options {
                links '../../../../vanilla-core/build/docs/javadoc'
                links 'https://developer.android.com/reference'
            }
            exclude '**/BuildConfig.java'
            exclude '**/R.java'
        }.dependsOn javaCompile, ':vanilla-core:javadoc'

        publications.create(name, MavenPublication) {
            artifact source: outputs[0].outputFile, builtBy: assemble

            artifact task("jar${stem}Sources", type: Jar, group: 'publishing') {
                classifier 'sources'
                from javaCompile.source
            }

            artifact task("jar${stem}Javadoc", type: Jar, dependsOn: docs, group: 'publishing') {
                classifier 'javadoc'
                from docs.destinationDir
            }

            pom.withXml {
                def node = asNode().appendNode('dependencies')
                allDeps.findAll { !it.provided }.resolvedCoordinates.each {
                    def dep = node.appendNode('dependency')
                    dep.appendNode('groupId', it.groupId)
                    dep.appendNode('artifactId', it.artifactId)
                    dep.appendNode('version', it.version)
                }
            }
        }
    }
}
